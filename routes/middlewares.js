var conf = require('../config').conf;
var User = require('../models/apps').User;


/**
 * @api Configuration Fields
 * @apiVersion 1.0.0
 * @apiName Configuration
 * @apiGroup Configuration
 *
 * @apiDescription This section lists the configuration parameters of the microservice
 *
 * @apiParam {Number} dbPort mongoDb Port number
 * @apiParam {String} dbHost mongoDb Host name
 * @apiParam {String} dbName mongoDb database name
 * @apiParam {Number} limit  default limit param used to paginate GET responses
 * @apiParam {Number} skip   default skip param used to paginate GET responses
 * @apiParam {String} MyMicroserviceToken the token for this microservice. Autogenerated if not set *
 * @apiParam {Object} AdminDefaultUser Administrator default user dictionary
 * @apiParam {String} AdminDefaultUser.email Administrator default user email
 * @apiParam {String} AdminDefaultUser.password Administrator default user password
 * @apiParam {String="admin"} AdminDefaultUser.type Administrator default user type *
 * @apiParam {String="http", "https"} authProtocol=http protocol used in authms
 * @apiParam {String} authHost authms hostname or IP
 * @apiParam {String} authPort authms port
 * @apiParam {String} apiGwAuthBaseUrl API gateway base URL (mandatory if an API gateway is used)
 * @apiParam {String} apiVersion API version *
 * @apiParam {String="http", "https"} consulProtocol=http protocol used to call consul service. Configure it if you use a consul register/service discovery in your architecture
 * @apiParam {String} consulHost  consul hostname or IP. Configure it if you use a consul register/service discovery in your architecture
 * @apiParam {String} consulPort consul port. Configure it if you use a consul register/service discovery in your architecture
 * @apiParam {String} consulServices=/v1/agent/services consul service endpoint. Configure it if you use a consul register/service discovery in your architecture
 * @apiParam {String} consulHealth=/v1/health/service consul service health endpoint. Configure it if you use a consul register/service discovery in your architecture
 * @apiParam {String} tokenLF token life setting dictionary
 * @apiParam {String="years", "quarters", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds"} tokenLF.unit=days Unit is the key of what time you want to add from current time for token life,
 * @apiParam {String} tokenLF.value=7 the amount of unit you want to add
 *
 * @apiSampleRequest off
 */







//Middleware to parse DB query fields selection from request URI
//Adds dbQueryFields to request
exports.parseFields = function (req, res, next) {

    var fields = req.query.fields ? req.query.fields.split(",") : null;

    if (fields) {
        req.dbQueryFields = fields.join(' ');
    }
    else {
        req.dbQueryFields = null;
    }
    next();

};


//Middleware to parse pagination params from request URI
//Adds dbPagination to request
exports.parsePagination = function (req, res, next) {

    var skip = req.query.skip && !isNaN(parseInt(req.query.skip)) ? parseInt(req.query.skip) : conf.skip;
    var limit = req.query.limit && parseInt(req.query.limit) < conf.limit ? parseInt(req.query.limit) : conf.limit;

    if((skip==-1) || (limit==-1))
        req.dbPagination = {};
    else
        req.dbPagination = {"skip": skip, "limit": limit};
    next();

};


exports.parseOptions = function (req, res, next) {

    var sortDescRaw = req.query.sortDesc ? req.query.sortDesc.split(",") : null;
    var sortAscRaw = req.query.sortAsc ? req.query.sortAsc.split(",") : null;

    if (sortAscRaw || sortDescRaw)
        req.sort = {asc: sortAscRaw, desc: sortDescRaw}
    else
        req.sort = null;

    next();

};

