var conf = require('../config').conf;
var User = require('../models/apps').User;


/**
 * @api Configuration Fields
 * @apiVersion 1.0.0
 * @apiName Configuration
 * @apiGroup Configuration
 *
 * @apiDescription This section lists the configuration parameters of the microservice
 *
 * @apiParam {Number} dbPort mongoDb Port number
 * @apiParam {String} dbHost mongoDb Host name
 * @apiParam {String} dbName mongoDb database name
 * @apiParam {Number} limit  default limit param used to paginate get response
 * @apiParam {Number} skip   default skip param used to paginate get response
 * @apiParam {String} logfile log file path
 * @apiParam {Array} userType dictionary of User types, e.g. ["admin","crocierista" , "ente", "operatore"]
 * @apiParam {Array} appType dictionary of Application types, e.g. ["webuiMS", "ext", "user","ms"]
 * @apiParam {Array} msType  dictionary of Microservice types, e.g. ["AppService" , "UsersService", "ContentsService","AuthMs","webuiMS"]
 * @apiParam {String} MyMicroserviceToken the token for this microservice. Autogenerated if not set
 */



//Middleware to parse DB query fields selection from request URI
//Adds dbQueryFields to request
exports.parseFields = function (req, res, next) {

    var fields = req.query.fields ? req.query.fields.split(",") : null;

    if (fields) {
        req.dbQueryFields = fields.join(' ');
    }
    else {
        req.dbQueryFields = null;
    }
    next();

};


//Middleware to parse pagination params from request URI
//Adds dbPagination to request
exports.parsePagination = function (req, res, next) {

    var skip = req.query.skip && !isNaN(parseInt(req.query.skip)) ? parseInt(req.query.skip) : conf.skip;
    var limit = req.query.limit && parseInt(req.query.limit) < conf.limit ? parseInt(req.query.limit) : conf.limit;

    req.dbPagination = {"skip": skip, "limit": limit};
    next();

};


exports.parseOptions = function (req, res, next) {

    var sortDescRaw = req.query.sortDesc ? req.query.sortDesc.split(",") : null;
    var sortAscRaw = req.query.sortAsc ? req.query.sortAsc.split(",") : null;

    if (sortAscRaw || sortDescRaw)
        req.sort = {asc: sortAscRaw, desc: sortDescRaw}
    else
        req.sort = null;

    next();

};

