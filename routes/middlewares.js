/*
 ############################################################################
 ############################### GPL III ####################################
 ############################################################################
 *                         Copyright 2017 CRS4â€¨                                *
 *       This file is part of CRS4 Microservice Core - Auth (CMC-Auth).       *
 *                                                                            *
 *       CMC-Auth is free software: you can redistribute it and/or modify     *
 *     it under the terms of the GNU General Public License as published by   *
 *       the Free Software Foundation, either version 3 of the License, or    *
 *                    (at your option) any later version.                     *
 *                                                                            *
 *       CMC-Auth is distributed in the hope that it will be useful,          *
 *      but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        *
 *               GNU General Public License for more details.                 *
 *                                                                            *
 *       You should have received a copy of the GNU General Public License    *
 *       along with CMC-Auth.  If not, see <http://www.gnu.org/licenses/>.    *
 * ############################################################################
 */

var conf = require('../config').conf;
var User = require('../models/apps').User;


/**
 * @api Configuration Fields
 * @apiVersion 1.0.0
 * @apiName Configuration
 * @apiGroup Configuration
 *
 * @apiDescription This section lists the configuration parameters of the microservice. You can set these parameters in default.json in
 * config directory (under project root), or by command line thanks to the propertiesmanager package.
 *
 * default.json properties can be overridden and extended by command line parameters.
 *
 * To extend it, you must type in command line --ParamName=ParamValues as in the example below:
 *
 * Override "property_1" properties from default.json :
 *
 * $ npm start -- --property_1="Override_TestOne".
 *
 * The first "--" after npm start command must be used to tell npm that the next parameters must be passed to node bin/www, so if you run your
 * application with node bin/www the first "--" shall not be used, as in:
 *
 * $node bin/www --properties_One="Override_TestOne".
 *
 * To override parameters in a tree data structure as a JSON, you have to access the nested fields by using the dotted (".") syntax.
 *
 * For further examples see propertiesmanager npm package.
 *
 *
 * @apiParam {Number} dbPort mongoDb port number
 * @apiParam {String} dbHost mongoDb host name
 * @apiParam {String} dbName mongoDb database name
 * @apiParam {Number} limit  default limit param used to paginate GET responses
 * @apiParam {Number} skip   default skip param used to paginate GET responses
 * @apiParam {String} MyMicroserviceToken the token for this microservice. Autogenerated if not set
 * @apiParam {Object} AdminDefaultUser Administrator default user dictionary
 * @apiParam {String} AdminDefaultUser.email Administrator default user email
 * @apiParam {String} AdminDefaultUser.password Administrator default user password
 * @apiParam {String="admin"} AdminDefaultUser.type Administrator default user type
 * @apiParam {String} authUrl URL used to call authorization microservice resource
 * @apiParam {String} consulUrl URL used to call consul service. Configure it if you use a consul register/service discovery in your architecture
 * @apiParam {String} consulServices=/v1/agent/services consul service endpoint. Configure it if you use a consul register/service discovery in your architecture
 * @apiParam {String} consulHealth=/v1/health/service consul service health endpoint. Configure it if you use a consul register/service discovery in your architecture
 * @apiParam {String} tokenLF token life setting dictionary
 * @apiParam {String="years", "quarters", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds"} tokenLF.unit=days Unit is the key of what time you want to add from current time for token life,
 * @apiParam {String} tokenLF.value=7 the amount of unit you want to add
 *
 * @apiSampleRequest off
 */







//Middleware to parse DB query fields selection from request URI
//Adds dbQueryFields to request
exports.parseFields = function (req, res, next) {

    var fields = req.query.fields ? req.query.fields.split(",") : null;

    if (fields) {
        req.dbQueryFields = fields.join(' ');
    }
    else {
        req.dbQueryFields = null;
    }
    next();

};


//Middleware to parse pagination params from request URI
//Adds dbPagination to request
exports.parsePagination = function (req, res, next) {

    var skip = req.query.skip && !isNaN(parseInt(req.query.skip)) ? parseInt(req.query.skip) : conf.skip;
    var limit = req.query.limit && parseInt(req.query.limit) < conf.limit ? parseInt(req.query.limit) : conf.limit;

    if((skip==-1) || (limit==-1))
        req.dbPagination = {};
    else
        req.dbPagination = {"skip": skip, "limit": limit};
    next();

};


exports.parseOptions = function (req, res, next) {

    var sortDescRaw = req.query.sortDesc ? req.query.sortDesc.split(",") : null;
    var sortAscRaw = req.query.sortAsc ? req.query.sortAsc.split(",") : null;

    if (sortAscRaw || sortDescRaw)
        req.sort = {asc: sortAscRaw, desc: sortDescRaw}
    else
        req.sort = null;

    next();

};

