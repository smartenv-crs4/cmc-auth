[  {    "type": "get",    "url": "/apptypes",    "title": "Get all application token types",    "version": "1.0.0",    "name": "Application_token_type_list",    "group": "AppType",    "description": "<p>Accessible only by access tokens, returns a paginated list of all available application types.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ]      }    },    "filename": "routes/appTypes.js",    "groupTitle": "AppType",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/apptypes"      }    ],    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "_metadata",            "description": "<p>Object containing metadata for pagination info</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.skip",            "description": "<p>Number of results of this query skipped</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.limit",            "description": "<p>Limits the number of results to be returned by this query.</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.totalCount",            "description": "<p>Total number of query results.</p>"          },          {            "group": "Success 200",            "type": "Object[]",            "optional": false,            "field": "userandapptypes",            "description": "<p>a paginated array list of application types objects</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "userandapptypes._id",            "description": "<p>application type id</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "userandapptypes.name",            "description": "<p>application token type name</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "userandapptypes.type",            "description": "<p>must be equal to &quot;app&quot;</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "userandapptypes.super",            "description": "<p>if set true, the application token type is like an admin token</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": true,            "field": "userandapptypes.field1",            "description": "<p>field 1: other field defined in application type schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": true,            "field": "userandapptypes.field2",            "description": "<p>field 2: other field defined in application type schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": true,            "field": "userandapptypes.fieldN",            "description": "<p>field N: other field defined in application type schema</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK, Success Response",          "content": "{\n  \"userandapptypes\":[\n                 {\n                     \"_id\": \"543fdd60579e1281b8f6da92\",\n                     \"name\": \"externalApp\",\n                     \"type\": \"app\",\n                     \"super\": false\n                 },\n                 {\n                     \"_id\": \"543fdd60579e1281b8f6da92\",\n                     \"name\": \"externalWebUi\",\n                     \"type\": \"app\",\n                     \"super\": true\n                },\n               ...\n            ],\n\n  \"_metadata\":{\n              \"skip\":10,\n              \"limit\":50,\n              \"totalCount\":100\n              }\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "post",    "url": "/apptypes",    "title": "Create a new application token type",    "version": "1.0.0",    "name": "Create_new_application_token_type",    "group": "AppType",    "description": "<p>Accessible only by access tokens, creates a new Application token type and returns the created resource.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "Body parameter": [          {            "group": "Body parameter",            "type": "Object",            "optional": false,            "field": "apptype",            "description": "<p>the application token type dictionary with all the fields. Name is mandatory.</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "apptype.name",            "description": "<p>the application token type name</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "HTTP/1.1 POST request\n Body:{ \"apptype\": {\"name\":\"ExternalWebUi\"}}",          "type": "json"        }      ]    },    "success": {      "fields": {        "201 - CREATED": [          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "_id",            "description": "<p>id of the created application type</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>name the of created application type</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "type",            "description": "<p>type of the created application type. Must be equal to &quot;app&quot;</p>"          }        ]      },      "examples": [        {          "title": "Example: 201 CREATED",          "content": "HTTP/1.1 201 CREATED\n{\n  \"_id\":\"9804H4334HFN\",\n  \"name\":\"ExternaWebUi\",\n  \"type\":\"app\",\n}",          "type": "json"        }      ]    },    "filename": "routes/appTypes.js",    "groupTitle": "AppType",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/apptypes"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "delete",    "url": "/apptypes/:id",    "title": "delete application token type",    "version": "1.0.0",    "name": "Delete_application_token_type",    "group": "AppType",    "description": "<p>Accessible only by access tokens, deletes Application token type and returns the deleted resource.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the Application token type id</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "_id",            "description": "<p>Application token type identifier</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>Application token type name</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 OK\n{\n  \"_id\":\"543fdd60579e1281b8f6da92\",\n  \"name\":\"externalWebUi\"\n}",          "type": "json"        }      ]    },    "filename": "routes/appTypes.js",    "groupTitle": "AppType",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/apptypes/:id"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "409_Conflict",            "description": "<p><b>Conflict:</b> Indicates that the request could not be processed because of conflict in the request. For Example a resource could not be deleted because is used from other resource <b>request.body.error</b> contains an error name specifing the Error.<BR> <b>request.body.erro_messager</b> contains an error message specifing the conflict.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "get",    "url": "/apptypes/:id",    "title": "Get application type by Id",    "version": "1.0.0",    "name": "Get_Application_type_info",    "group": "AppType",    "description": "<p>Accessible only by access_tokens, returns the application token type dictionary.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the Application token type id</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "_id",            "description": "<p>Application  token type identifier</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>Application token type name</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK, Success Response",          "content": "{\n   \"_id\": \"543fdd60579e1281b8f6da92\",\n   \"name\": \"externalWebUi\"\n}",          "type": "json"        }      ]    },    "filename": "routes/appTypes.js",    "groupTitle": "AppType",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/apptypes/:id"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "put",    "url": "/apptypes/:id",    "title": "update application token type",    "version": "1.0.0",    "name": "Update_application_token_type",    "group": "AppType",    "description": "<p>Accessible only by access tokens, updates the application token type info and returns the updated resource.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>Application token type identifier</p>"          }        ],        "Body parameter": [          {            "group": "Body parameter",            "type": "Object",            "optional": false,            "field": "apptype",            "description": "<p>Application token type dictionary with all the fields to update.</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "apptype.name",            "description": "<p>Application token type name</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "HTTP/1.1 PUT request\n Body:{ \"apptype\": {\"name\":\"ExternalWebUi\"}}",          "type": "json"        }      ]    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "_id",            "description": "<p>id of the updated application token type</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>name of the updated application token type</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "type",            "description": "<p>type of the updated application token type. Must be equal to &quot;app&quot;</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 OK\n{\n  \"_id\":\"9804H4334HFN\",\n  \"name\":\"ExternaWebUi\",\n  \"type\":\"app\",\n}",          "type": "json"        }      ]    },    "filename": "routes/appTypes.js",    "groupTitle": "AppType",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/apptypes/:id"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "409_Conflict",            "description": "<p><b>Conflict:</b> Indicates that the request could not be processed because of conflict in the request. For Example a resource could not be deleted because is used from other resource <b>request.body.error</b> contains an error name specifing the Error.<BR> <b>request.body.erro_messager</b> contains an error message specifing the conflict.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "post",    "url": "/authapp/signup",    "title": "Create a new Application",    "version": "1.0.0",    "name": "Create_Application",    "group": "Application",    "description": "<p>Accessible by access token, creates a new Application object and returns the access credentials.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "Body parameter": [          {            "group": "Body parameter",            "type": "Object",            "optional": false,            "field": "app",            "description": "<p>the application dictionary with all the fields. Only email, password and type are mandatory.</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "app.email",            "description": "<p>Application email, valid as username to login</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "app.password",            "description": "<p>Application password</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "app.type",            "description": "<p>Application type. for example external, webUi...</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": true,            "field": "app.name",            "description": "<p>Application name for example cruiseKiosk,PortWebUI....</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": true,            "field": "app.avatar",            "description": "<p>Application avatar image  identifier in uploadms</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": true,            "field": "app.notes",            "description": "<p>Application notes</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "HTTP/1.1 POST request\n Body:{ \"email\": \"prova@prova.it\" , \"password\":\"provami\", \"type\":\"ext\", \"name\":\"nome\"}",          "type": "json"        }      ]    },    "success": {      "fields": {        "201 - CREATED": [          {            "group": "201 - CREATED",            "type": "Object",            "optional": false,            "field": "apiKey",            "description": "<p>contains information about apiKey token</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "apiKey.token",            "description": "<p>application Token</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "apiKey.expires",            "description": "<p>token expiration date</p>"          },          {            "group": "201 - CREATED",            "type": "Object",            "optional": false,            "field": "refreshToken",            "description": "<p>contains information about refreshToken used to renew token</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "refreshToken.token",            "description": "<p>application refreshToken</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "refreshToken.expires",            "description": "<p>refreshToken expiration date</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "userId",            "description": "<p>application id</p>"          }        ]      },      "examples": [        {          "title": "Example: 201 CREATED",          "content": "  HTTP/1.1 201 CREATED\n  {\n    \"apiKey\":{\n              \"token\":\"VppR5sHU_hV3U\",\n              \"expires\":1466789299072\n    },\n    \"refreshToken\":{\n               \"token\":\"eQO7de4AJe-syk\",\n               \"expires\":1467394099074\n    },\n   \"userId\":\"4334f423432\"\n}",          "type": "json"        }      ]    },    "filename": "routes/apps.js",    "groupTitle": "Application",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authapp/signup"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "403_Unauthorized",            "description": "<p>Username or password not valid.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>Not Logged ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>wrong username or password</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        },        {          "title": "Error-Response: 403 Unauthorized",          "content": "HTTP/1.1 403 Unauthorized\n {\n    \"error\":\"Unauthorized\",\n    \"error_description\":\"Warning: wrong username\"\n }",          "type": "json"        }      ]    }  },  {    "type": "delete",    "url": "/authapp/:id",    "title": "delete Application",    "version": "1.0.0",    "name": "Delete_Application",    "group": "Application",    "description": "<p>Accessible only by access tokens, delete the Application and returns the deleted resource.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the Application id</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "String",            "optional": true,            "field": "ApplicationField_1",            "description": "<p>field 1 defined in Application Schema (e.g. name)</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": true,            "field": "ApplicationField_2",            "description": "<p>field 2 defined in Application Schema (e.g. notes)</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": true,            "field": "ApplicationField_N",            "description": "<p>field N defined in Application Schema (e.g. type)</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": " HTTP/1.1 200 OK\n{\n   \"name\":\"Micio\",\n   \"notes\":\"Macio\",\n }",          "type": "json"        }      ]    },    "filename": "routes/apps.js",    "groupTitle": "Application",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authapp/:id"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "post",    "url": "/authapp/:id/actions/disable",    "title": "disable Application",    "version": "1.0.0",    "name": "DisableApplication",    "group": "Application",    "description": "<p>Accessible only by microservice access tokens, disable the Application.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the Application id</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "status",            "description": "<p>the new Application status</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 OK\n{\n  \"status\":\"disabled\"\n}",          "type": "json"        }      ]    },    "filename": "routes/apps.js",    "groupTitle": "Application",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authapp/:id/actions/disable"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "post",    "url": "/authapp/:id/actions/enable",    "title": "enable Application",    "version": "1.0.0",    "name": "EnableApplication",    "group": "Application",    "description": "<p>Accessible only by access tokend, enable the Application.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the Application id</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "status",            "description": "<p>contains the new Application status</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 OK\n{\n  \"status\":\"enabled\"\n}",          "type": "json"        }      ]    },    "filename": "routes/apps.js",    "groupTitle": "Application",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authapp/:id/actions/enable"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "get",    "url": "/authapp/:id",    "title": "Get Application by id",    "version": "1.0.0",    "name": "GetApplication",    "group": "Application",    "description": "<p>Accessible only by access tokens, returns the application dictionary.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the Application id</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "Application.id",            "description": "<p>Application identifier</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "Application.field1",            "description": "<p>field 1 defined in schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "Application.field2",            "description": "<p>field 2 defined in schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "Application.fieldN",            "description": "<p>field N defined in schema</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK, Success Response",          "content": "{\n   \"_id\": \"543fdd60579e1281b8f6da92\",\n   \"email\": \"prova@prova.it\",\n   \"name\": \"prova\",\n   \"notes\": \"Notes About prova\"\n}",          "type": "json"        }      ]    },    "filename": "routes/apps.js",    "groupTitle": "Application",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authapp/:id"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "get",    "url": "/authapp/",    "title": "Get all Applications",    "version": "1.0.0",    "name": "Get_Applications",    "group": "Application",    "description": "<p>Accessible only by access tokens, returns a paginated list of all Applications. Set pagination skip and limit and other filters in the URL request, e.g. &quot;get /authapp?skip=10&amp;limit=50&amp;name=Mario&quot;</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ]      }    },    "filename": "routes/apps.js",    "groupTitle": "Application",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authapp/"      }    ],    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "_metadata",            "description": "<p>Object containing metadata for pagination info</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.skip",            "description": "<p>Number of results of this query skipped</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.limit",            "description": "<p>Limits the number of results to be returned by this query.</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.totalCount",            "description": "<p>Total number of query results.</p>"          },          {            "group": "Success 200",            "type": "Object[]",            "optional": false,            "field": "users",            "description": "<p>a paginated array list of users objects</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.id",            "description": "<p>User id identifier</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.field1",            "description": "<p>field 1 defined in schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.field2",            "description": "<p>field 2 defined in schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.fieldN",            "description": "<p>field N defined in schema</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK, Success Response",          "content": "{\n  \"users\":[\n                 {\n                     \"_id\": \"543fdd60579e1281b8f6da92\",\n                     \"email\": \"prova@prova.it\",\n                     \"name\": \"prova\",\n                     \"notes\": \"Notes About prova\"\n                 },\n                 {\n                  \"id\": \"543fdd60579e1281sdaf6da92\",\n                     \"email\": \"prova1@prova.it\",\n                     \"name\": \"prova1\", *\n                     \"notes\": \"Notes About prova1\"\n\n                },\n               ...\n            ],\n\n  \"_metadata\":{\n              \"skip\":10,\n              \"limit\":50,\n              \"totalCount\":100\n              }\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "post",    "url": "/authapp/signin",    "title": "authapp login",    "version": "1.0.0",    "name": "Login_Application",    "group": "Application",    "description": "<p>Accessible only by access_tokens, signIn application and returns the access credentials.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "Body parameter": [          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "username",            "description": "<p>the email</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>the password</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "HTTP/1.1 POST request\n Body:{ \"username\": \"prov@prova.it\" , \"password\":\"provami\"}",          "type": "json"        }      ]    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "Object",            "optional": false,            "field": "apiKey",            "description": "<p>contains information about apiKey token</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "apiKey.token",            "description": "<p>application Token</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "apiKey.expires",            "description": "<p>token expiration date</p>"          },          {            "group": "200 - OK",            "type": "Object",            "optional": false,            "field": "refreshToken",            "description": "<p>contains information about refreshToken used to renew token</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "refreshToken.token",            "description": "<p>application refreshToken</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "refreshToken.expires",            "description": "<p>refreshToken expiration date</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "userId",            "description": "<p>application id</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "  HTTP/1.1 200 OK\n  {\n    \"apiKey\":{\n              \"token\":\"VppR5sHU_hV3U\",\n              \"expires\":1466789299072\n    },\n    \"refreshToken\":{\n              \"token\":\"eQO7de4AJe-syk\",\n              \"expires\":1467394099074\n    },\n   \"userId\":\"4334f423432\"\n}",          "type": "json"        }      ]    },    "filename": "routes/apps.js",    "groupTitle": "Application",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authapp/signin"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "403_Unauthorized",            "description": "<p>Username or password not valid.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>Not Logged ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>wrong username or password</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        },        {          "title": "Error-Response: 403 Unauthorized",          "content": "HTTP/1.1 403 Unauthorized\n {\n    \"error\":\"Unauthorized\",\n    \"error_description\":\"Warning: wrong username\"\n }",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/authapp/:id/actions/resetpassword",    "title": "Reset Application password",    "version": "1.0.0",    "name": "ResetPassword",    "group": "Application",    "description": "<p>Accessible only by access tokens, Create a reset password token.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the Application id</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "reset_token",            "description": "<p>the grant token to set the new password</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 OK\n{\n  \"reset_token\":\"ffewfh5hfdfds7678d6fsdf7d6fsdfd86d8sf6\", *\n}",          "type": "json"        }      ]    },    "filename": "routes/apps.js",    "groupTitle": "Application",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authapp/:id/actions/resetpassword"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "post",    "url": "/authapp/:id/actions/setpassword",    "title": "Set new Application password",    "version": "1.0.0",    "name": "SetPassword",    "group": "Application",    "description": "<p>Accessible only by access_token, update the Application password.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the Application id</p>"          }        ],        "Body parameter": [          {            "group": "Body parameter",            "type": "String",            "optional": true,            "field": "oldpassword",            "description": "<p>the old password to update. If set, reset_token must be undefined</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "newpassword",            "description": "<p>the new password</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": true,            "field": "reset_token",            "description": "<p>this token is used to update password. If set, oldpassword must be undefined</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "Object",            "optional": false,            "field": "apiKey",            "description": "<p>contains information about apiKey token</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "apiKey.token",            "description": "<p>application Token</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "apiKey.expires",            "description": "<p>token expiration date</p>"          },          {            "group": "200 - OK",            "type": "Object",            "optional": false,            "field": "refreshToken",            "description": "<p>contains information about refreshToken used to renew token</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "refreshToken.token",            "description": "<p>application refreshToken</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "refreshToken.expires",            "description": "<p>refreshToken expiration date</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "userId",            "description": "<p>application id</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 OK\n{\n  \"apiKey\":{\n            \"token\":\"VppR5sHU_hV3U\",\n            \"expires\":1466789299072\n  },\n  \"refreshToken\":{\n            \"token\":\"eQO7de4AJe-syk\",\n            \"expires\":1467394099074\n  },\n \"userId\":\"4334f423432\"\n}",          "type": "json"        }      ]    },    "filename": "routes/apps.js",    "groupTitle": "Application",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authapp/:id/actions/setpassword"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "403_Unauthorized",            "description": "<p>Username or password not valid.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>Not Logged ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>wrong username or password</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        },        {          "title": "Error-Response: 403 Unauthorized",          "content": "HTTP/1.1 403 Unauthorized\n {\n    \"error\":\"Unauthorized\",\n    \"error_description\":\"Warning: wrong username\"\n }",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/authms/signup",    "title": "Create a new Microservice",    "version": "1.0.0",    "name": "Create_a_new_Microservice",    "group": "Authms",    "description": "<p>Accessible only by access tokens, creates a new microservice type.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "Body parameter": [          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>the name of the microservice to create</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "baseUrl",            "description": "<p>the microservice gateway/loadbalance base url</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "color",            "description": "<p>the color used in the UI to represent the microservice</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "icon",            "description": "<p>the icon used in the UI to represent the microservice</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "HTTP/1.1 POST request\n Body:{ \"name\": \"userms\",\n       \"baseUrl\":\"localhost:3000/nginx\",\n       \"color\":\"yellow\",\n       \"icon\":\"fa-users\"\n      }",          "type": "json"        }      ]    },    "success": {      "fields": {        "201 - OK": [          {            "group": "201 - OK",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>The microservice name</p>"          },          {            "group": "201 - OK",            "type": "String",            "optional": false,            "field": "baseUrl",            "description": "<p>microservice base url</p>"          },          {            "group": "201 - OK",            "type": "String",            "optional": false,            "field": "color",            "description": "<p>color in configure interface</p>"          },          {            "group": "201 - OK",            "type": "String",            "optional": false,            "field": "icon",            "description": "<p>icon in configure interface</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 Ok",          "content": "HTTP/1.1 201 CREATED\n{\n  \"name\":\"userms\",\n  \"baseUrl\":\"localhost:3000/nginx\",\n  \"color\":\"yellow\",\n  \"icon\":\"fa-users\"\n}",          "type": "json"        }      ]    },    "filename": "routes/microserviceReg.js",    "groupTitle": "Authms",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authms/signup"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "post",    "url": "/authms/authendpoint",    "title": "Create a new authorization role",    "version": "1.0.0",    "name": "Create_a_new_authorization_role",    "group": "Authms",    "description": "<p>Accessible only by access tokens, creates a new authorization role and returns it.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "Body parameter": [          {            "group": "Body parameter",            "type": "Object",            "optional": false,            "field": "microservice",            "description": "<p>the microservice role dictionary. URI, authToken and method are mandatory fields.</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": true,            "field": "microservice.name",            "description": "<p>the name of the microservice whose access is managed by the role</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "microservice.URI",            "description": "<p>URI of resource whose access is managed by the role</p>"          },          {            "group": "Body parameter",            "type": "String[]",            "optional": false,            "field": "microservice.authToken",            "description": "<p>a list of token types allowed to access this resource managed by the role</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "microservice.method",            "description": "<p>HTTP method (GET, POST, PUT, DELETE) that MUST be set to specialize the role</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "HTTP/1.1 POST request\n Body:{ \"microservice\": {\n              \"URI\":\"/users\",\n              \"authToken\":[\"WebUI\", \"UserMS\"],\n              \"method\":\"POST\",\n              \"name\":\"authms\"\n             }\n }",          "type": "json"        }      ]    },    "success": {      "fields": {        "201 - OK": [          {            "group": "201 - OK",            "type": "String",            "optional": false,            "field": "_id",            "description": "<p>role identifier</p>"          },          {            "group": "201 - OK",            "type": "String",            "optional": false,            "field": "URI",            "description": "<p>URI of the resource</p>"          },          {            "group": "201 - OK",            "type": "String[]",            "optional": false,            "field": "authToken",            "description": "<p>list of token types allowed to access the resource</p>"          },          {            "group": "201 - OK",            "type": "String",            "optional": false,            "field": "method",            "description": "<p>HTTP method (GET, POST, PUT, DELETE) that can be set to specialize the role</p>"          },          {            "group": "201 - OK",            "type": "String",            "optional": true,            "field": "name",            "description": "<p>microservice name on which role are set</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 Ok",          "content": "HTTP/1.1 201 CREATED\n{\n  \"_id\":\"9804H4334HFN......\",\n  \"URI\":\"/users......\",\n  \"method\":\"POST\",\n  \"name\":\"authms\",\n  \"authToken\":[\"WebUI\", \"UserMS\"]\n}",          "type": "json"        }      ]    },    "filename": "routes/microserviceReg.js",    "groupTitle": "Authms",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authms/authendpoint"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "delete",    "url": "/authms/authendpoint/:id",    "title": "Delete authorization role by Id",    "version": "1.0.0",    "name": "DeleteAuthrolesById",    "group": "Authms",    "description": "<p>Accessible only by access_token, it delete an authorization role by id.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>authorization role id</p>"          }        ]      }    },    "success": {      "fields": {        "204 - NO CONTENT": [          {            "group": "204 - NO CONTENT",            "type": "String",            "optional": false,            "field": "_id",            "description": "<p>role identifier</p>"          },          {            "group": "204 - NO CONTENT",            "type": "String",            "optional": true,            "field": "name",            "description": "<p>the name of the microservice whose access is managed by the role</p>"          },          {            "group": "204 - NO CONTENT",            "type": "String",            "optional": false,            "field": "URI",            "description": "<p>URI of the resource whose access is managed by the role</p>"          },          {            "group": "204 - NO CONTENT",            "type": "String",            "optional": false,            "field": "method",            "description": "<p>HTTP method (GET, POST, PUT, DELETE) that could have been set to specialize the role</p>"          },          {            "group": "204 - NO CONTENT",            "type": "String[]",            "optional": false,            "field": "authToken",            "description": "<p>a list of token types allowed to access the resource</p>"          }        ]      },      "examples": [        {          "title": "Example: 204 NO CONTENT",          "content": "HTTP/1.1 204 NO CONTENT\n   {\n      \"_id\": \"543fdd60579e1281b8f6da92\",\n      \"name\": \"authMS\",\n      \"URI\": \"/users\",\n      \"method\":\"GET\",\n      \"authToken\":[\"WebUI\", \"externalApp\", \"UserMS\"]\n   }",          "type": "json"        }      ]    },    "filename": "routes/microserviceReg.js",    "groupTitle": "Authms",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authms/authendpoint/:id"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "delete",    "url": "/authms/:id",    "title": "Delete a microservice",    "version": "1.0.0",    "name": "Delete_a_microservice",    "group": "Authms",    "description": "<p>Accessible only by access tokens, deletes a microservice.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the microservice id to delete</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>The microservice name</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "baseUrl",            "description": "<p>microservice base url</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "color",            "description": "<p>color in configure interface</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "icon",            "description": "<p>icon in configure interface</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 Ok",          "content": "HTTP/1.1 200 Deleted\n{\n  \"name\":\"userms\",\n  \"baseUrl\":\"localhost:3000/nginx\",\n  \"color\":\"yellow\",\n  \"icon\":\"fa-users\"\n}",          "type": "json"        }      ]    },    "filename": "routes/microserviceReg.js",    "groupTitle": "Authms",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authms/:id"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "get",    "url": "/authms/authendpoint",    "title": "Get all authorization roles",    "version": "1.0.0",    "name": "GetAuthroles",    "group": "Authms",    "description": "<p>Accessible only by access tokens, returns a paginated list of all endpoint roles.<BR> Set pagination skip and limit or other filters in the URL request, e.g. &quot;get /authms/authendpoint?skip=10&amp;limit=50&quot;</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "Query parameter": [          {            "group": "Query parameter",            "type": "Number",            "optional": true,            "field": "skip",            "description": "<p>pagination skip param</p>"          },          {            "group": "Query parameter",            "type": "Number",            "optional": true,            "field": "limit",            "description": "<p>pagination limit param</p>"          },          {            "group": "Query parameter",            "type": "String",            "optional": true,            "field": "URI",            "description": "<p>Filter by URI</p>"          },          {            "group": "Query parameter",            "type": "String",            "allowedValues": [              "\"GET\"",              "\"POST\"",              "\"PUT\"",              "\"DELETE\""            ],            "optional": true,            "field": "method",            "description": "<p>Filter by method</p>"          },          {            "group": "Query parameter",            "type": "String",            "optional": true,            "field": "name",            "description": "<p>filter by the name of the microservice (is not recommended, use /authendpoint/:name enpoint)</p>"          },          {            "group": "Query parameter",            "type": "String",            "optional": true,            "field": "_id",            "description": "<p>filter by the id of the microservice (is not recommended, use /authendpoint/:id enpoint)</p>"          }        ]      }    },    "filename": "routes/microserviceReg.js",    "groupTitle": "Authms",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authms/authendpoint"      }    ],    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "_metadata",            "description": "<p>Object containing metadata for pagination info</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.skip",            "description": "<p>Number of results of this query skipped</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.limit",            "description": "<p>Limits the number of results to be returned by this query.</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.totalCount",            "description": "<p>Total number of query results.</p>"          },          {            "group": "Success 200",            "type": "Object[]",            "optional": false,            "field": "users",            "description": "<p>a paginated array list of users objects</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.id",            "description": "<p>User id identifier</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.field1",            "description": "<p>field 1 defined in schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.field2",            "description": "<p>field 2 defined in schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.fieldN",            "description": "<p>field N defined in schema</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK, Success Response",          "content": "{\n  \"users\":[\n                 {\n                     \"_id\": \"543fdd60579e1281b8f6da92\",\n                     \"email\": \"prova@prova.it\",\n                     \"name\": \"prova\",\n                     \"notes\": \"Notes About prova\"\n                 },\n                 {\n                  \"id\": \"543fdd60579e1281sdaf6da92\",\n                     \"email\": \"prova1@prova.it\",\n                     \"name\": \"prova1\", *\n                     \"notes\": \"Notes About prova1\"\n\n                },\n               ...\n            ],\n\n  \"_metadata\":{\n              \"skip\":10,\n              \"limit\":50,\n              \"totalCount\":100\n              }\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "get",    "url": "/authms/authendpoint/:id",    "title": "Get authorization role by Id",    "version": "1.0.0",    "name": "GetAuthrolesById",    "group": "Authms",    "description": "<p>Accessible only by access_token, it returns an authorization role by id.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>authorization role id</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "_id",            "description": "<p>role identifier</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": true,            "field": "name",            "description": "<p>the name of the microservice whose access is managed by the role</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "URI",            "description": "<p>URI of resource whose access is managed by the role</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "method",            "description": "<p>HTTP method (GET, POST, PUT, DELETE) that can be set to specialize the role</p>"          },          {            "group": "200 - OK",            "type": "String[]",            "optional": false,            "field": "authToken",            "description": "<p>list of token types allowed to access the resource</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 OK\n   {\n      \"_id\": \"543fdd60579e1281b8f6da92\",\n      \"name\": \"authMS\",\n      \"URI\": \"/users\",\n      \"method\":\"GET\",\n      \"authToken\":[\"WebUI\", \"externalApp\", \"UserMS\"]\n   }",          "type": "json"        }      ]    },    "filename": "routes/microserviceReg.js",    "groupTitle": "Authms",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authms/authendpoint/:id"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "get",    "url": "/authms/authendpoint/:name",    "title": "Get authorization roles of a given microservice",    "version": "1.0.0",    "name": "GetMicroserviceAuthroles",    "group": "Authms",    "description": "<p>Accessible only by access tokens, returns the paginated list of all endpoint roles of a given microservice.<BR> Set pagination skip and limit or other filters in the URL request, e.g. &quot;get /authms/authendpoint?skip=10&amp;limit=50&quot;</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>the name of the microservice</p>"          }        ],        "Query parameter": [          {            "group": "Query parameter",            "type": "Number",            "optional": true,            "field": "skip",            "description": "<p>pagination skip param</p>"          },          {            "group": "Query parameter",            "type": "Number",            "optional": true,            "field": "limit",            "description": "<p>pagination limit param</p>"          },          {            "group": "Query parameter",            "type": "String",            "optional": true,            "field": "URI",            "description": "<p>Filter by URI</p>"          },          {            "group": "Query parameter",            "type": "String",            "allowedValues": [              "\"GET\"",              "\"POST\"",              "\"PUT\"",              "\"DELETE\""            ],            "optional": true,            "field": "method",            "description": "<p>Filter by method</p>"          }        ]      }    },    "filename": "routes/microserviceReg.js",    "groupTitle": "Authms",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authms/authendpoint/:name"      }    ],    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "_metadata",            "description": "<p>Object containing metadata for pagination info</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.skip",            "description": "<p>Number of results of this query skipped</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.limit",            "description": "<p>Limits the number of results to be returned by this query.</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.totalCount",            "description": "<p>Total number of query results.</p>"          },          {            "group": "Success 200",            "type": "Object[]",            "optional": false,            "field": "users",            "description": "<p>a paginated array list of users objects</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.id",            "description": "<p>User id identifier</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.field1",            "description": "<p>field 1 defined in schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.field2",            "description": "<p>field 2 defined in schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.fieldN",            "description": "<p>field N defined in schema</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK, Success Response",          "content": "{\n  \"users\":[\n                 {\n                     \"_id\": \"543fdd60579e1281b8f6da92\",\n                     \"email\": \"prova@prova.it\",\n                     \"name\": \"prova\",\n                     \"notes\": \"Notes About prova\"\n                 },\n                 {\n                  \"id\": \"543fdd60579e1281sdaf6da92\",\n                     \"email\": \"prova1@prova.it\",\n                     \"name\": \"prova1\", *\n                     \"notes\": \"Notes About prova1\"\n\n                },\n               ...\n            ],\n\n  \"_metadata\":{\n              \"skip\":10,\n              \"limit\":50,\n              \"totalCount\":100\n              }\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "post",    "url": "/authms/renewtoken",    "title": "Refresh microservice token",    "version": "1.0.0",    "name": "Refresh_microservice_token",    "group": "Authms",    "description": "<p>Accessible only by access tokens, creates a new acess_token for a given microservice type.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "Body parameter": [          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "serviceType",            "description": "<p>the name of the microservice token type</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "HTTP/1.1 POST request\n Body:{ \"serviceType\": \"userms\" }",          "type": "json"        }      ]    },    "success": {      "fields": {        "201 - OK": [          {            "group": "201 - OK",            "type": "String",            "optional": false,            "field": "token",            "description": "<p>The microservice access_token</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 Ok",          "content": "HTTP/1.1 201 CREATED\n{\n  \"token\":\"9804H4334HFN......\"\n}",          "type": "json"        }      ]    },    "filename": "routes/microserviceReg.js",    "groupTitle": "Authms",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authms/renewtoken"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "put",    "url": "/authms/authendpoint/:id",    "title": "Update authorization role by Id",    "version": "1.0.0",    "name": "UpdateAuthrolesById",    "group": "Authms",    "description": "<p>Accessible only by access tokens, updates an authorization role by id.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>role identifier</p>"          }        ],        "Body parameter": [          {            "group": "Body parameter",            "type": "Object",            "optional": false,            "field": "microservice",            "description": "<p>the role dictionary with updatable fields defined below</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": true,            "field": "microservice.URI",            "description": "<p>URI of the resource whose access is managed by the role</p>"          },          {            "group": "Body parameter",            "type": "String[]",            "optional": true,            "field": "microservice.authToken",            "description": "<p>authToken a list of token types enabled to access to this resource that are subject of the role.</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": true,            "field": "microservice.method",            "description": "<p>method HTTP method (GET, POST, PUT, DELETE) that could have been set to specialize the role</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "HTTP/1.1 POST request\n Body:{ \"microservice\": {\n              \"URI\":\"/users\",\n              \"authToken\":[\"WebUI\", \"UserMS\"],\n              \"method\":\"POST\"\n             }\n      }",          "type": "json"        }      ]    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "_id",            "description": "<p>resource access role id identifier</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>name of microservice which has set the role.</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "URI",            "description": "<p>URI of resource on which has set the role.</p>"          },          {            "group": "200 - OK",            "type": "String[]",            "optional": false,            "field": "authToken",            "description": "<p>list of token types allowed to access the resource</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "method",            "description": "<p>HTTP method (GET, POST, PUT, DELETE) that could have been set to specialize the role</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 OK\n   {\n      \"_id\": \"543fdd60579e1281b8f6da92\",\n      \"name\": \"authMS\",\n      \"URI\": \"/users\",\n      \"method\":\"GET\",\n      \"authToken\":[\"WebUI\", \"externalApp\", \"UserMS\"]\n   }",          "type": "json"        }      ]    },    "filename": "routes/microserviceReg.js",    "groupTitle": "Authms",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authms/authendpoint/:id"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "",    "url": "Configuration",    "title": "Fields",    "version": "1.0.0",    "name": "Configuration",    "group": "Configuration",    "description": "<p>This section lists the configuration parameters of the microservice</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Number",            "optional": false,            "field": "dbPort",            "description": "<p>mongoDb Port number</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "dbHost",            "description": "<p>mongoDb Host name</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "dbName",            "description": "<p>mongoDb database name</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": false,            "field": "limit",            "description": "<p>default limit param used to paginate get response</p>"          },          {            "group": "Parameter",            "type": "Number",            "optional": false,            "field": "skip",            "description": "<p>default skip param used to paginate get response</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "MyMicroserviceToken",            "description": "<p>the token for this microservice. Autogenerated if not set *</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "AdminDefaultUser",            "description": "<p>Administrator Administrator default user dictionary</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "AdminDefaultUser.email",            "description": "<p>email Administrator default user email</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "AdminDefaultUser.password",            "description": "<p>password Administrator default user password</p>"          },          {            "group": "Parameter",            "type": "String",            "allowedValues": [              "\"admin\""            ],            "optional": false,            "field": "AdminDefaultUser.type",            "description": "<p>type Administrator default user type *</p>"          },          {            "group": "Parameter",            "type": "String",            "allowedValues": [              "\"http\"",              "\"https\""            ],            "optional": false,            "field": "authProtocol",            "defaultValue": "http",            "description": "<p>protocol used in authms</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "authHost",            "description": "<p>authms hostname or IP</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "authPort",            "description": "<p>authms port</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "apiGwAuthBaseUrl",            "description": "<p>API gateway base URL(mandatory if a gateway is used in the architecture)</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "apiVersion",            "description": "<p>API version *</p>"          },          {            "group": "Parameter",            "type": "String",            "allowedValues": [              "\"http\"",              "\"https\""            ],            "optional": false,            "field": "consulProtocol",            "defaultValue": "http",            "description": "<p>protocol used to call consul service. Configure it if you use a consul register/service discovery in your architecture</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "consulHost",            "description": "<p>consul hostname or IP. Configure it if you use a consul register/service discovery in your architecture</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "consulPort",            "description": "<p>consul port. Configure it if you use a consul register/service discovery in your architecture</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "consulServices",            "defaultValue": "/v1/agent/services",            "description": "<p>consul service endpoint. Configure it if you use a consul register/service discovery in your architecture</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "consulHealth",            "defaultValue": "/v1/health/service",            "description": "<p>consul service health endpoint. Configure it if you use a consul register/service discovery in your architecture</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "tokenLF",            "description": "<p>token life setting dictionary</p>"          },          {            "group": "Parameter",            "type": "String",            "allowedValues": [              "\"years\"",              "\"quarters\"",              "\"months\"",              "\"weeks\"",              "\"days\"",              "\"hours\"",              "\"minutes\"",              "\"seconds\"",              "\"milliseconds\""            ],            "optional": false,            "field": "tokenLF.unit",            "defaultValue": "days",            "description": "<p>Unit is the key of what time you want to add from current time for token life,</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "tokenLF.value",            "defaultValue": "7",            "description": "<p>value the amount of unit you want to add</p>"          }        ]      }    },    "filename": "routes/middlewares.js",    "groupTitle": "Configuration",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1Configuration"      }    ]  },  {    "type": "post",    "url": "/actions/checkiftokenisauth",    "title": "PostAuthorizationByRole",    "version": "1.0.0",    "name": "Decode_tPostAuthorizationByRole",    "group": "Token",    "description": "<p>Accessible only by access tokens, it decodes a token boxed in decode_token parameter and check if this token type has the authorization to access a resource with a particular HTTP method. Returns the contents bundled in the token and a field &quot;valid&quot; that indicates if token is valid end enabled.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "Body parameter": [          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "decode_token",            "description": "<p>token to be unboxed and verified</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "URI",            "description": "<p>endpoint resource on which you want to access  with a token boxed in decode_token parameter</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "method",            "description": "<p>HTTP resource method on which you want to access with a token boxed in decode_token parameter</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "Boolean",            "optional": false,            "field": "valid",            "description": "<p>if true, the decoded token is valid, this token type is enabled to call this URI with the specified http method and a token field is returned. If false, the decoded token is not valid and an error_message field is returned</p>"          },          {            "group": "200 - OK",            "type": "Boolean",            "optional": false,            "field": "token",            "description": "<p>decoded token information - returned only if valid field is true</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "token._id",            "description": "<p>id of the token owner</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "token.email",            "description": "<p>email address of the token owner</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "token.type",            "description": "<p>token owner type</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "token.enabled",            "description": "<p>if true, the owner is allowed to access the resource</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "token.expires",            "description": "<p>token expiration date</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "error_message",            "description": "<p>error message explaining the problem in decoding the token - returned only if field &quot;valid&quot; is false</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 Ok\n{\n  \"valid\":\"true\"\n  \"token\":{\n            \"_id\":\"eQO7de4AJe-syk\",\n            \"expires\":1467394099074,\n            \"email\":\"prova@prova.it\",\n            \"type\":\"webUI\",\n            \"enabled:true\n          }\n}",          "type": "json"        },        {          "title": "Example: 401  Not Authorized",          "content": "HTTP/1.1 401 Not Authorized\n{\n  \"valid\":\"false\"\n  \"error_message\":\"token is expired\"\n}",          "type": "json"        },        {          "title": "Example: 401  Not Authorized",          "content": "HTTP/1.1 401 Not Authorized\n{\n   \"valid\":\"false\"\n   \"error_message\":\"No auth roles defined for: GET /resource\"\n}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n{\n   \"error\":\"BadRequest\",\n   \"error_message\":\"decode_token parameter is mandatory\"\n}",          "type": "json"        },        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ],      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      }    },    "filename": "routes/actions.js",    "groupTitle": "Token",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/actions/checkiftokenisauth"      }    ]  },  {    "type": "get",    "url": "/actions/getsuperapptokenlist",    "title": "GetAdminApplicationTokenList",    "version": "1.0.0",    "name": "GetAdminApplicationTokenList",    "group": "Token",    "description": "<p>Accessible only by access tokens, gets a list of valid super app token types.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "String[]",            "optional": false,            "field": "superapp",            "description": "<p>a list of valid and available admin app tokens</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 Ok\n{\n    \"superapp\":[ \"appTypeOne\" , \"appTypeTwo\" .....]\n}",          "type": "json"        }      ]    },    "filename": "routes/actions.js",    "groupTitle": "Token",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/actions/getsuperapptokenlist"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "get",    "url": "/actions/checkiftokenisauth",    "title": "GetAuthorizationByRole",    "version": "1.0.0",    "name": "GetAuthorizationByRole",    "group": "Token",    "description": "<p>Accessible only by access tokens, it decodes a token boxed in decode_token parameter and check if this token type has the authorization to access a resource with a particular HTTP method. Returns the contents bundled in the token and a field &quot;valid&quot; that indicates if token is enabled and authorised.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "Query parameter": [          {            "group": "Query parameter",            "type": "String",            "optional": false,            "field": "decode_token",            "description": "<p>token to be unboxed and verified</p>"          },          {            "group": "Query parameter",            "type": "String",            "optional": false,            "field": "URI",            "description": "<p>endpoint resource on which you want to access  with a token boxed in decode_token parameter</p>"          },          {            "group": "Query parameter",            "type": "String",            "optional": false,            "field": "method",            "description": "<p>HTTP resource method on which you want to access with a token boxed in decode_token parameter</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "Boolean",            "optional": false,            "field": "valid",            "description": "<p>if true, the decoded token is valid, this token type is enabled to call this URI with the specified http method and a token field with unboxed content is returned. If false, the decoded token is not valid and an error_message field is returned</p>"          },          {            "group": "200 - OK",            "type": "Object",            "optional": true,            "field": "token",            "description": "<p>decoded token information - returned only if valid field is true</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "token._id",            "description": "<p>id of the token owner</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "token.email",            "description": "<p>email address of the token owner</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "token.type",            "description": "<p>token owner type</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "token.enabled",            "description": "<p>if true, the owner is allowed to access the resource</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "token.expires",            "description": "<p>token expiration date</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": true,            "field": "error_message",            "description": "<p>error message explaining the problem in decoding the token - returned only if field &quot;valid&quot; is false</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 Ok\n{\n  \"valid\":\"true\"\n  \"token\":{\n            \"_id\":\"eQO7de4AJe-syk\",\n            \"expires\":1467394099074,\n            \"email\":\"prova@prova.it\",\n            \"type\":\"webUI\",\n            \"enabled\":true\n          }\n}",          "type": "json"        },        {          "title": "Example: 401  Not Authorized",          "content": "HTTP/1.1 401 Not Authorized\n{\n  \"valid\":\"false\"\n  \"error_message\":\"token is expired\"\n}",          "type": "json"        },        {          "title": "Example:401  Not Authorized",          "content": "HTTP/1.1 401 Not Authorized\n{\n   \"valid\":\"false\"\n   \"error_message\":\"No auth roles defined for: GET /resource\"\n}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n{\n   \"error\":\"BadRequest\",\n   \"error_message\":\"decode_token parameter is mandatory\"\n}",          "type": "json"        },        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ],      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      }    },    "filename": "routes/actions.js",    "groupTitle": "Token",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/actions/checkiftokenisauth"      }    ]  },  {    "type": "get",    "url": "/actions/decodeToken",    "title": "GetDecodeToken",    "version": "1.0.0",    "name": "GetDecodeToken",    "group": "Token",    "description": "<p>Accessible by access tokens, it decodes a token and returns the contents bundled in the token</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "Query parameter": [          {            "group": "Query parameter",            "type": "String",            "optional": false,            "field": "decode_token",            "description": "<p>token to be unboxed</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "Boolean",            "optional": false,            "field": "valid",            "description": "<p>if true, the decoded token is valid and a token field is returned. If false, the decoded token is not valid and an error_message field is returned</p>"          },          {            "group": "200 - OK",            "type": "Object",            "optional": true,            "field": "token",            "description": "<p>decoded token information - returned only if valid field is true</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "token._id",            "description": "<p>id of the token owner</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "token.email",            "description": "<p>email address of the token owner</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "token.type",            "description": "<p>token owner type</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "token.enabled",            "description": "<p>if true, the owner is allowed to access the resource</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "token.expires",            "description": "<p>token expiration date</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": true,            "field": "error_message",            "description": "<p>error message explaining the problem in decoding the token - returned only if field &quot;valid&quot; is false</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 Ok\n{\n  \"valid\":\"true\"\n  \"token\":{\n            \"_id\":\"eQO7de4AJe-syk\",\n            \"expires\":1467394099074,\n            \"email\":\"prova@prova.it\",\n            \"type\":\"webUI\",\n            \"enabled\":true\n          }\n}",          "type": "json"        },        {          "title": "Example: 401",          "content": "HTTP/1.1 401 Not Authorized\n{\n  \"valid\":\"false\"\n  \"error_message\":\"token is expired\"\n}",          "type": "json"        }      ]    },    "filename": "routes/actions.js",    "groupTitle": "Token",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/actions/decodeToken"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "get",    "url": "/actions/getsupeusertokenlist",    "title": "GetSuperUserTokenList",    "version": "1.0.0",    "name": "GetSuperUserTokenList",    "group": "Token",    "description": "<p>Accessible only by microservice access tokens. gets a list of valid admin token types.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "String[]",            "optional": false,            "field": "superuser",            "description": "<p>a list of valid and available admin user tokens</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 OK\n{\n    \"superuser\":[ \"userTypeOne\" , \"userTypeTwo\" .....]\n}",          "type": "json"        }      ]    },    "filename": "routes/actions.js",    "groupTitle": "Token",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/actions/getsupeusertokenlist"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "get",    "url": "/actions/gettokentypelist",    "title": "GetTokenTypeList",    "version": "1.0.0",    "name": "GetTokenTypeList",    "group": "Token",    "description": "<p>Accessible only by microservice access tokens. Gets a list of valid token types.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "String[]",            "optional": false,            "field": "user",            "description": "<p>a list of valid and available users tokens</p>"          },          {            "group": "200 - OK",            "type": "String[]",            "optional": false,            "field": "app",            "description": "<p>a list of valid and available application tokens</p>"          },          {            "group": "200 - OK",            "type": "String[]",            "optional": false,            "field": "ms",            "description": "<p>a list of valid and available microservice tokens</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 Ok\n{\n  \"user\":[ \"userTypeOne\" , \"userTypeTwo\" .....],\n  \"app\":[ \"appTypeOne\" , \"appTypeTwo\" .....],\n  \"ms\":[ \"msTypeOne\" , \"msTypeTwo\" .....]\n}",          "type": "json"        }      ]    },    "filename": "routes/actions.js",    "groupTitle": "Token",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/actions/gettokentypelist"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "post",    "url": "/actions/decodeToken",    "title": "PostDecodeToken",    "version": "1.0.0",    "name": "PostDecodeToken",    "group": "Token",    "description": "<p>Accessible by access tokens, it decodes a token and returns the contents bundled in the token</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "Query parameter": [          {            "group": "Query parameter",            "type": "String",            "optional": false,            "field": "decode_token",            "description": "<p>token to be unboxed</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "Boolean",            "optional": false,            "field": "valid",            "description": "<p>if true, the decoded token is valid and a token field is returned. If false, the decoded token is not valid and an error_message field is returned</p>"          },          {            "group": "200 - OK",            "type": "Object",            "optional": false,            "field": "token",            "description": "<p>decoded token information - returned only if valid field is true</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "token._id",            "description": "<p>id of the token owner</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "token.email",            "description": "<p>email address of the token owner</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "token.type",            "description": "<p>token owner type</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "token.enabled",            "description": "<p>if true, the owner is allowed to access the resource</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "token.expires",            "description": "<p>token expiration date</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "error_message",            "description": "<p>error message explaining the problem in decoding the token - returned only if field &quot;valid&quot; is false</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 Ok\n{\n  \"valid\":\"true\"\n  \"token\":{\n            \"_id\":\"eQO7de4AJe-syk\",\n            \"expires\":1467394099074,\n            \"email\":\"prova@prova.it\",\n            \"type\":\"webUI\",\n            \"enabled:true\n          }\n}",          "type": "json"        },        {          "title": "Example: 401",          "content": "HTTP/1.1 401 Not Authorized\n{\n  \"valid\":\"false\"\n  \"error_message\":\"token is expired\"\n}",          "type": "json"        }      ]    },    "filename": "routes/actions.js",    "groupTitle": "Token",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/actions/decodeToken"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "post",    "url": "/actions/refreshToken",    "title": "RefreshToken",    "version": "1.0.0",    "name": "RefreshToken",    "group": "Token",    "description": "<p>Accessible by access tokens, renews the token</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "Body parameter": [          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "refresh_token",            "description": "<p>token used to renew the token</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "HTTP/1.1 POST request\n Body:{ \"refresh_token\": \"dsadasddfdf6g4fdgfh687gfhf\"}",          "type": "json"        }      ]    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "Object",            "optional": false,            "field": "apiKey",            "description": "<p>contains information about apiKey token</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "apiKey.token",            "description": "<p>consumer token</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "apiKey.expires",            "description": "<p>token expiration date</p>"          },          {            "group": "200 - OK",            "type": "Object",            "optional": false,            "field": "refreshToken",            "description": "<p>contains information about refreshToken used to renew a token</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "refreshToken.token",            "description": "<p>authapp refreshToken</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "refreshToken.expires",            "description": "<p>refreshToken expiration date</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "userId",            "description": "<p>consumer id</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 OK\n{\n  \"apiKey\":{\n            \"token\":\"VppR5sHU_hV3U\",\n            \"expires\":1466789299072\n           },\n  \"refreshToken\":{\n                  \"token\":\"eQO7de4AJe-syk\",\n                  \"expires\":1467394099074\n                 },\n  \"userId\":\"4334f423432\"\n}",          "type": "json"        }      ]    },    "filename": "routes/actions.js",    "groupTitle": "Token",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/actions/refreshToken"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "delete",    "url": "/authuser/:id",    "title": "delete user",    "version": "1.0.0",    "name": "Delete_User",    "group": "User",    "description": "<p>Accessible only by access tokens, deletes the User and returns the deleted resource.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the Application id</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "UserField_1",            "description": "<p>Contains field 1 defined in User Schema (example name)</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "UserField_2",            "description": "<p>Contains field 2 defined in User Schema (example notes)</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "UserField_N",            "description": "<p>Contains field N defined in User Schema (example type)</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 - OK\n{\n  \"name\":\"Micio\",\n  \"notes\":\"Macio\",\n}",          "type": "json"        }      ]    },    "filename": "routes/auth.js",    "groupTitle": "User",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authuser/:id"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "post",    "url": "/authuser/:id/actions/disable",    "title": "disable user",    "version": "1.0.0",    "name": "Disable_User",    "group": "User",    "description": "<p>Accessible only by access tokens, disables the User.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the Application id</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "status",            "description": "<p>the new Application status</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 OK\n{\n  \"status\":\"disabled\"\n}",          "type": "json"        }      ]    },    "filename": "routes/auth.js",    "groupTitle": "User",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authuser/:id/actions/disable"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "post",    "url": "/authuser/:id/actions/enable",    "title": "enable user",    "version": "1.0.0",    "name": "Enable_User",    "group": "User",    "description": "<p>Accessible only by access_token, enables the User.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the Application id</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "status",            "description": "<p>the new User status</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 OK\n{\n  \"status\":\"enabled\"\n}",          "type": "json"        }      ]    },    "filename": "routes/auth.js",    "groupTitle": "User",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authuser/:id/actions/enable"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "get",    "url": "/authuser/:id",    "title": "Get the User by id",    "version": "1.0.0",    "name": "Get_User",    "group": "User",    "description": "<p>Accessible only by access_token, returns user dictionary.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the User id</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "User.id",            "description": "<p>Application id identifier</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "User.field1",            "description": "<p>field 1 defined in schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "User.field2",            "description": "<p>field 2 defined in schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "User.fieldN",            "description": "<p>field N defined in schema</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK, Success Response",          "content": "{\n   \"_id\": \"543fdd60579e1281b8f6da92\",\n   \"email\": \"prova@prova.it\",\n   \"name\": \"prova\",\n   \"notes\": \"Notes About prova\"\n}",          "type": "json"        }      ]    },    "filename": "routes/auth.js",    "groupTitle": "User",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authuser/:id"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "get",    "url": "/authuser",    "title": "Get all Users",    "version": "1.0.0",    "name": "Get_User",    "group": "User",    "description": "<p>Accessible only by access tokens, returns a paginated list of all Users. Set pagination skip and limit and other filters in the URL request, e.g. &quot;get /authuser?skip=10&amp;limit=50&amp;name=Mario&quot;</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ]      }    },    "filename": "routes/auth.js",    "groupTitle": "User",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authuser"      }    ],    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "_metadata",            "description": "<p>Object containing metadata for pagination info</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.skip",            "description": "<p>Number of results of this query skipped</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.limit",            "description": "<p>Limits the number of results to be returned by this query.</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.totalCount",            "description": "<p>Total number of query results.</p>"          },          {            "group": "Success 200",            "type": "Object[]",            "optional": false,            "field": "users",            "description": "<p>a paginated array list of users objects</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.id",            "description": "<p>User id identifier</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.field1",            "description": "<p>field 1 defined in schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.field2",            "description": "<p>field 2 defined in schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.fieldN",            "description": "<p>field N defined in schema</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK, Success Response",          "content": "{\n  \"users\":[\n                 {\n                     \"_id\": \"543fdd60579e1281b8f6da92\",\n                     \"email\": \"prova@prova.it\",\n                     \"name\": \"prova\",\n                     \"notes\": \"Notes About prova\"\n                 },\n                 {\n                  \"id\": \"543fdd60579e1281sdaf6da92\",\n                     \"email\": \"prova1@prova.it\",\n                     \"name\": \"prova1\", *\n                     \"notes\": \"Notes About prova1\"\n\n                },\n               ...\n            ],\n\n  \"_metadata\":{\n              \"skip\":10,\n              \"limit\":50,\n              \"totalCount\":100\n              }\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "post",    "url": "/authuser/signin",    "title": "User login",    "version": "1.0.0",    "name": "Login_User",    "group": "User",    "description": "<p>Accessible only by access tokens, SignIn the User and returns the access credentials.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "Body parameter": [          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "username",            "description": "<p>the email</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>the password</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "HTTP/1.1 POST request\n Body:{ \"username\": \"prov@prova.it\" , \"password\":\"provami\"}",          "type": "json"        }      ]    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "Object",            "optional": false,            "field": "apiKey",            "description": "<p>information about apiKey token</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "apiKey.token",            "description": "<p>user Token</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "apiKey.expires",            "description": "<p>token expiration date</p>"          },          {            "group": "200 - OK",            "type": "Object",            "optional": false,            "field": "refreshToken",            "description": "<p>information about refreshToken used to renew token</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "refreshToken.token",            "description": "<p>user refreshToken</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "refreshToken.expires",            "description": "<p>refreshToken expiration date</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "userId",            "description": "<p>user id</p>"          }        ]      },      "examples": [        {          "title": "Example: 201 CREATED",          "content": "HTTP/1.1 201 CREATED\n{\n  \"apiKey\":{\n            \"token\":\"VppR5sHU_hV3U\",\n            \"expires\":1466789299072\n           },\n  \"refreshToken\":{\n                    \"token\":\"eQO7de4AJe-syk\",\n                    \"expires\":1467394099074\n                 },\n \"userId\":\"4334f423432\"\n}",          "type": "json"        }      ]    },    "filename": "routes/auth.js",    "groupTitle": "User",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authuser/signin"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "403_Unauthorized",            "description": "<p>Username or password not valid.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>Not Logged ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>wrong username or password</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        },        {          "title": "Error-Response: 403 Unauthorized",          "content": "HTTP/1.1 403 Unauthorized\n {\n    \"error\":\"Unauthorized\",\n    \"error_description\":\"Warning: wrong username\"\n }",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/authuser/:id/actions/resetpassword",    "title": "Reset user password",    "version": "1.0.0",    "name": "ResetPassword",    "group": "User",    "description": "<p>Accessible only by access tokens, resets password</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the Application id</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "reset_token",            "description": "<p>the reset token to set the new password</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 OK\n{\n  \"reset_token\":\"ffewfh5hfdfds7678d6fsdf7d6fsdfd86d8sf6\"\n}",          "type": "json"        }      ]    },    "filename": "routes/auth.js",    "groupTitle": "User",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authuser/:id/actions/resetpassword"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "post",    "url": "/authuser/:id/actions/setpassword",    "title": "Update the User password",    "version": "1.0.0",    "name": "SetPassword",    "group": "User",    "description": "<p>Accessible only by access tokens, updates the User password.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the User id</p>"          }        ],        "Body Parameter": [          {            "group": "Body Parameter",            "type": "String",            "optional": true,            "field": "oldpassword",            "description": "<p>the old password to update. If set, reset_token must be undefined</p>"          },          {            "group": "Body Parameter",            "type": "String",            "optional": false,            "field": "newpassword",            "description": "<p>the new password</p>"          },          {            "group": "Body Parameter",            "type": "String",            "optional": true,            "field": "reset_token",            "description": "<p>this token is used to update password. If set, oldpassword must be undefined</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "Object",            "optional": false,            "field": "apiKey",            "description": "<p>contains information about apiKey token</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "apiKey.token",            "description": "<p>User Token</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "apiKey.expires",            "description": "<p>token expiration date</p>"          },          {            "group": "200 - OK",            "type": "Object",            "optional": false,            "field": "refreshToken",            "description": "<p>contains information about refreshToken used to renew token</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "refreshToken.token",            "description": "<p>user refreshToken</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "refreshToken.expires",            "description": "<p>refreshToken expiration date</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "userId",            "description": "<p>user id</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK",          "content": "HTTP/1.1 200 OK\n{\n  \"apiKey\":{\n            \"token\":\"VppR5sHU_hV3U\",\n            \"expires\":1466789299072\n           },\n  \"refreshToken\":{\n                    \"token\":\"eQO7de4AJe-syk\",\n                    \"expires\":1467394099074\n                 },\n \"userId\":\"4334f423432\"\n}",          "type": "json"        }      ]    },    "filename": "routes/auth.js",    "groupTitle": "User",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authuser/:id/actions/setpassword"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "403_Unauthorized",            "description": "<p>Username or password not valid.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>Not Logged ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>wrong username or password</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        },        {          "title": "Error-Response: 403 Unauthorized",          "content": "HTTP/1.1 403 Unauthorized\n {\n    \"error\":\"Unauthorized\",\n    \"error_description\":\"Warning: wrong username\"\n }",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/authuser/signup",    "title": "SignUp a new User",    "version": "1.0.0",    "name": "SignUp_User",    "group": "User",    "description": "<p>Accessible only by access token, creates a new User and returns the access credentials.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "Body parameter": [          {            "group": "Body parameter",            "type": "Object",            "optional": false,            "field": "user",            "description": "<p>the User dictionary with all the fields, only email, password and type are mandatory.</p>"          }        ],        "Body Parameter": [          {            "group": "Body Parameter",            "type": "String",            "optional": false,            "field": "user.email",            "description": "<p>user email valid as username to login</p>"          },          {            "group": "Body Parameter",            "type": "String",            "optional": false,            "field": "user.password",            "description": "<p>user password</p>"          },          {            "group": "Body Parameter",            "type": "String",            "optional": false,            "field": "user.type",            "description": "<p>user type. for example admin, cruiser...</p>"          },          {            "group": "Body Parameter",            "type": "String",            "optional": true,            "field": "user.name",            "description": "<p>user name</p>"          },          {            "group": "Body Parameter",            "type": "String",            "optional": true,            "field": "user.surname",            "description": "<p>user surname</p>"          },          {            "group": "Body Parameter",            "type": "String",            "optional": true,            "field": "application.avatar",            "description": "<p>user avatar image id in uploadms</p>"          },          {            "group": "Body Parameter",            "type": "String",            "optional": true,            "field": "application.notes",            "description": "<p>user notes</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "HTTP/1.1 POST request\n Body:{ \"email\": \"prova@prova.it\" , \"password\":\"provami\", \"type\":\"ext\", \"name\":\"nome\"}",          "type": "json"        }      ]    },    "success": {      "fields": {        "201 - CREATED": [          {            "group": "201 - CREATED",            "type": "Object",            "optional": false,            "field": "apiKey",            "description": "<p>contains information about apiKey token</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "apiKey.token",            "description": "<p>user Token</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "apiKey.expires",            "description": "<p>token expiration date</p>"          },          {            "group": "201 - CREATED",            "type": "Object",            "optional": false,            "field": "refreshToken",            "description": "<p>contains information about refreshToken used to renew token</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "refreshToken.token",            "description": "<p>user refreshToken</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "refreshToken.expires",            "description": "<p>refreshToken expiration date</p>"          },          {            "group": "201 - CREATED",            "type": "String",            "optional": false,            "field": "userId",            "description": "<p>user id</p>"          }        ]      },      "examples": [        {          "title": "Example: 201 CREATED",          "content": "  HTTP/1.1 201 CREATED\n  {\n    \"apiKey\":{\n              \"token\":\"VppR5sHU_hV3U\",\n              \"expires\":1466789299072\n             },\n    \"refreshToken\":{\n                      \"token\":\"eQO7de4AJe-syk\",\n                      \"expires\":1467394099074\n                   },\n   \"userId\":\"4334f423432\"\n}",          "type": "json"        }      ]    },    "filename": "routes/auth.js",    "groupTitle": "User",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/authuser/signup"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "403_Unauthorized",            "description": "<p>Username or password not valid.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>Not Logged ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>wrong username or password</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        },        {          "title": "Error-Response: 403 Unauthorized",          "content": "HTTP/1.1 403 Unauthorized\n {\n    \"error\":\"Unauthorized\",\n    \"error_description\":\"Warning: wrong username\"\n }",          "type": "json"        }      ]    }  },  {    "type": "post",    "url": "/usertypes",    "title": "Create a new user type",    "version": "1.0.0",    "name": "CreateUserType",    "group": "UserType",    "description": "<p>Accessible only by access tokens, creates a new user token type and returns the created resource.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "Body parameter": [          {            "group": "Body parameter",            "type": "Object",            "optional": false,            "field": "body.usertype",            "description": "<p>the user type dictionary with all the fields.</p>"          },          {            "group": "Body parameter",            "type": "Object",            "optional": false,            "field": "body.usertype.name",            "description": "<p>the user type name</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "HTTP/1.1 POST request\n Body:{ \"usertype\": {\"name\":\"ExternalWebUi\"}}",          "type": "json"        }      ]    },    "success": {      "fields": {        "201 - OK": [          {            "group": "201 - OK",            "type": "String",            "optional": false,            "field": "_id",            "description": "<p>id of the created user type</p>"          },          {            "group": "201 - OK",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>name of the created user type</p>"          },          {            "group": "201 - OK",            "type": "String",            "optional": false,            "field": "type",            "description": "<p>type of the created user type. Must be equal to &quot;user&quot;</p>"          }        ]      },      "examples": [        {          "title": "Example: 201 CREATED",          "content": "HTTP/1.1 201 CREATED\n{\n  \"_id\":\"9804H4334HFN\",\n  \"name\":\"ExternaWebUi\",\n  \"type\":\"user\",\n}",          "type": "json"        }      ]    },    "filename": "routes/userTypes.js",    "groupTitle": "UserType",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/usertypes"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "delete",    "url": "/usertypes/:id",    "title": "delete user type",    "version": "1.0.0",    "name": "DeleteUserType",    "group": "UserType",    "description": "<p>Accessible only by access tokens, deletes user token type and returns the deleted resource.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the user type id</p>"          }        ]      }    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "_id",            "description": "<p>the user type id</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>the user type name</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 Ok",          "content": " HTTP/1.1 200 Ok\n{\n   \"_id\":\"543fdd60579e1281b8f6da92\",\n   \"name\":\"externalWebUi\"\n}",          "type": "json"        }      ]    },    "filename": "routes/userTypes.js",    "groupTitle": "UserType",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/usertypes/:id"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "409_Conflict",            "description": "<p><b>Conflict:</b> Indicates that the request could not be processed because of conflict in the request. For Example a resource could not be deleted because is used from other resource <b>request.body.error</b> contains an error name specifing the Error.<BR> <b>request.body.erro_messager</b> contains an error message specifing the conflict.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "get",    "url": "/usertypes",    "title": "Get all user types",    "version": "1.0.0",    "name": "GetAllUserTypes",    "group": "UserType",    "description": "<p>Accessible only by access tokens, returns a paginated list of all available user types.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ]      }    },    "filename": "routes/userTypes.js",    "groupTitle": "UserType",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/usertypes"      }    ],    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "_metadata",            "description": "<p>Object containing metadata for pagination info</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.skip",            "description": "<p>Number of results of this query skipped</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.limit",            "description": "<p>Limits the number of results to be returned by this query.</p>"          },          {            "group": "Success 200",            "type": "Number",            "optional": false,            "field": "_metadata.totalCount",            "description": "<p>Total number of query results.</p>"          },          {            "group": "Success 200",            "type": "Object[]",            "optional": false,            "field": "users",            "description": "<p>a paginated array list of users objects</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.id",            "description": "<p>User id identifier</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.field1",            "description": "<p>field 1 defined in schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.field2",            "description": "<p>field 2 defined in schema</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "users.fieldN",            "description": "<p>field N defined in schema</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK, Success Response",          "content": "{\n  \"users\":[\n                 {\n                     \"_id\": \"543fdd60579e1281b8f6da92\",\n                     \"email\": \"prova@prova.it\",\n                     \"name\": \"prova\",\n                     \"notes\": \"Notes About prova\"\n                 },\n                 {\n                  \"id\": \"543fdd60579e1281sdaf6da92\",\n                     \"email\": \"prova1@prova.it\",\n                     \"name\": \"prova1\", *\n                     \"notes\": \"Notes About prova1\"\n\n                },\n               ...\n            ],\n\n  \"_metadata\":{\n              \"skip\":10,\n              \"limit\":50,\n              \"totalCount\":100\n              }\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "get",    "url": "/usertypes/:id",    "title": "Get user type by Id",    "version": "1.0.0",    "name": "GetUserTypeById",    "group": "UserType",    "description": "<p>Accessible only by access tokens, returns the user token type dictionary.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the user type id</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "_id",            "description": "<p>the user type id</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>the user type name</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 OK, Success Response",          "content": "{\n\n   \"_id\": \"543fdd60579e1281b8f6da92\",\n   \"name\": \"externalWebUi\"\n}",          "type": "json"        }      ]    },    "filename": "routes/userTypes.js",    "groupTitle": "UserType",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/usertypes/:id"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  },  {    "type": "put",    "url": "/usertypes/:id",    "title": "update user type info",    "version": "1.0.0",    "name": "UpdateUserType",    "group": "UserType",    "description": "<p>Accessible only by access tokens, updates the user token type info and returns the updated resource.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": true,            "field": "Authorization",            "description": "<p>Unique access_token. If set, the same access_token in body or in query param must be undefined</p>"          }        ]      },      "examples": [        {          "title": "Header-Example:",          "content": "{\n  \"Authorization\": \"Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJtb2RlIjoidXNlciIsImlzcyI6IjU4YTMwNTcxM\"\n}",          "type": "json"        }      ]    },    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "access_token",            "description": "<p>access token that grants access to this resource. It must be sent in [ body || as query param ]. if set, the same  token sent in Authorization header should be undefined</p>"          }        ],        "URL parameter": [          {            "group": "URL parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>the user type id</p>"          }        ],        "Body parameter": [          {            "group": "Body parameter",            "type": "Object",            "optional": false,            "field": "usertype",            "description": "<p>the user type dictionary with all the updatable fields</p>"          },          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "usertype.name",            "description": "<p>the user type name</p>"          }        ]      },      "examples": [        {          "title": "Request-Example:",          "content": "HTTP/1.1 PUT request\n Body:{ \"usertype\": {\"name\":\"ExternalWebUi\"}}",          "type": "json"        }      ]    },    "success": {      "fields": {        "200 - OK": [          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "_id",            "description": "<p>id of the updated user type</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "name",            "description": "<p>name of the updated user type</p>"          },          {            "group": "200 - OK",            "type": "String",            "optional": false,            "field": "type",            "description": "<p>type of the updated user type. Must be equal to &quot;user&quot;</p>"          }        ]      },      "examples": [        {          "title": "Example: 200 Ok",          "content": " HTTP/1.1 200 OK\n{\n   \"_id\":\"9804H4334HFN\",\n   \"name\":\"ExternaWebUi\",\n   \"type\":\"user\",\n}",          "type": "json"        }      ]    },    "filename": "routes/userTypes.js",    "groupTitle": "UserType",    "sampleRequest": [      {        "url": "http://smartapi.crs4.it/api/authdemo/v1/usertypes/:id"      }    ],    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "401_Unauthorized",            "description": "<p>Not authorized to call this endpoint.<BR> <b>request.body.error:</b> error type message specifying the problem, e.g. <i>NotAuthorized ....</i><BR> <b>request.body.error_message:</b> error message specifying the problem e.g. <i>only admin user can create admin user</i><BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "404_NotFound",            "description": "<p>The Object with specified <code>id</code> was not found.<BR> <b>request.body.error</b> contains an error name specifying the 404_NotFound error.<BR> <b>request.body.error_message</b> contains an error message specifying the 404_NotFound error.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "409_Conflict",            "description": "<p><b>Conflict:</b> Indicates that the request could not be processed because of conflict in the request. For Example a resource could not be deleted because is used from other resource <b>request.body.error</b> contains an error name specifing the Error.<BR> <b>request.body.erro_messager</b> contains an error message specifing the conflict.<BR></p>"          },          {            "group": "Error 4xx",            "optional": false,            "field": "400_BadRequest",            "description": "<p>The server cannot or will not process the request due to something perceived as a client error<BR> <b>request.body.error</b> error type message specifying the problem, e.g. <i>BadRequest ....</i><BR> <b>request.body.error_message</b> error message specifying the problem e.g. <i>malformed request syntax, invalid reques, invalid fields ....</i><BR></p>"          }        ],        "Error 5xx": [          {            "group": "Error 5xx",            "type": "Object",            "optional": false,            "field": "500_ServerError",            "description": "<p>Internal Server Error. <BR> <b>request.body.error</b>: error type message specifying the problem, e.g. <i>Db Internal Microservice Error ....</i><BR> <b>request.body.error_message</b>: error message specifying the problem e.g. <i>Connection Down</i><BR></p>"          }        ]      },      "examples": [        {          "title": "Error-Response: 401 Unauthorized",          "content": "HTTP/1.1 401 Unauthorized\n {\n    \"error\":\"invalid_token\",\n    \"error_description\":\"Unauthorized: The access token expired\"\n }",          "type": "json"        },        {          "title": "Error-Response: 400 BadRequest",          "content": "HTTP/1.1 400 InvalidRequest\n {\n    error:'BadRequest',\n    error_message:'no body sended',\n }",          "type": "json"        },        {          "title": "Error-Response: 500 Internal Server Error",          "content": "HTTP/1.1 500 Internal Server Error\n {\n    \"error\": 'Internal Error'\n    \"error_message\": 'something blew up, ERROR: No MongoDb Connection'\n }",          "type": "Object"        }      ]    }  }]
